import { ethers } from "hardhat";
import { prepareInputs } from "../../test/utils/state-utils";
//import * as IVerifierABI from "../../artifacts/contracts/interfaces/IVerifier.sol/IVerifier.json";

import { IVerifierABI } from "@iden3/universal-verifier-v2-abi";

async function main() {
  const groth16VerifierContract = await ethers.getContractAt(
    "Groth16VerifierV3Wrapper",
    "0x94BD14D2eDC0F78Ec51780cb6C06cfEA5eE2f3d9",
  );
  console.log("Submitting proof to Groth16VerifierV3Wrapper...");
  const jsonProof = {
    id: "1766847064778384848774503903277701057664923553150306959495349798740162883",
    circuitId: "credentialAtomicQueryV3OnChain-beta.1",
    proof: {
      pi_a: [
        "19216698943995881536467438976255145066117342212086053547004920219466270835933",
        "16812674723450859309698679165296114205679072429266442094305516729598627498925",
        "1",
      ],
      pi_b: [
        [
          "2719540313173633861555421666165951873572331376548581790543238788654051551439",
          "804827370749704609814157761995692684503230317827306961845106467331341624328",
        ],
        [
          "9413051822202300705675277343004888973960358667001671318036993299033205651588",
          "143785458397386943059993661557003665761025228557546688346595743020948491375",
        ],
        ["1", "0"],
      ],
      pi_c: [
        "6495841308209005977462935099675637838408152653497379283951927728795137281436",
        "2539476284465547571390965528680099911555013158903373993931533534444903238909",
        "1",
      ],
      protocol: "groth16",
      curve: "bn128",
    },
    pub_signals: [
      "21673682315500606770216217236361793129204560053792578606692428956428030465",
      "14269590020162247624697549264280988226443582809667296964001711108738429282249",
      "15204044154861027985799819612996094031620433951451229330994164767550803554542",
      "0",
      "7001310985615618788035259439939117451658345204922150271394992238934558759524",
      "0",
      "1",
      "1766847064778384848774503903277701057664923553150306959495349798740162883",
      "1397738411366811577672750727150514215345254087370",
      "0",
      "19450027436906808598733474944478006388219978643758688014300016516391457281",
      "15204044154861027985799819612996094031620433951451229330994164767550803554542",
      "1752674750",
      "1",
    ],
  };
  const { inputs, pi_a, pi_b, pi_c } = prepareInputs(jsonProof);
  console.log("Verifying Groth16 proof...");
  const verified = await groth16VerifierContract.verify(pi_a, pi_b, pi_c, inputs);
  console.log("Verified: ", verified);

  const verifierContract = await ethers.getContractAt(
    "UniversalVerifierTestWrapper_ManyResponsesPerUserAndRequest",
    "0xfa1d72bbEBdEBc16d00e6e51B164746B297de688",
  );

  /*const verifierContract = await ethers.getContractAt(
    "UniversalVerifier",
    "0xc89fA32a60aa91f0AbB2225c9e338bf8F634F20d",
  );*/

  const bytesAuthProof =
    "0x00000000000000000000000000000000000000000000000000000000000001202dae62f984ce163a6816191a2443bf8735f2fdc9a9ce6fc3666163641ba3ac940e661e8965170a5b4cb795b36c77783ccc5c7f4985defb24a070a554590512f61677acb29289921beae51168e85550d23931893c8ffad146e0917af336c5c69a19f1fcc8b0f4e762d08b06e4b2cee00488baa5a573236cf07d787c2ef1f41fc127f0199310ef07031149f4a0638d6d5d7ee7c7b0a8d45068344bb7d87478175708d148dc22c0152d4ae3599d1b24ebc1085ff738e60cdb00a748f5c6428e44db0725333ec20b3859607b5ccaaacb44c71219d05b74eee183c77d8f1356bb3ea9105314412a75798fd6574de14a632c0bb5c913dc59ce7679be08acdc39ba55210000000000000000000000000000000000000000000000000000000000000003000d86bd4fd4b8e120f58db83fb14957ae55840e4fb0ff564e2429632fba520106bca4c7aee96778ca29a23a2a6d6322fa437fedba55c602d630dfa67ec0e02c0be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a";
  const bytesRequestProof =
    "0x0000000000000000000000000000000000000000000000000000000000000120160786a893cac8c0baa7a08747d74d62922074a26c0fb3c828df2d0944eba18a0283a0cce600154d48f6ef8e45f52eefc2492dcdae15fc8c01e395e909ec3f2b1ee938477a22c54d4fe8fd57c2d037faec133ebd0f70d0ae5469170f77a6b7c20b0519ef4f1c47bad9cb321136458390a13cf6b417dc2d3a5719c22e39bd3c2c2df63f6404b79e63e53e8e9f002f35ff68c96b29a3e3c97b9703c8fd919576fa2501767e0c147af46e12d655e79314806bc922a178315018b49db4dd1f94b9762cf58c82c8ff93a2ff8f84741c39266447d3a485d6fb53c3cac97dc42a1c8ad41acae094bc3cd97fcc9f000654efa60bd039abfbe0ad3370aa9b6ee579f2cf7b000000000000000000000000000000000000000000000000000000000000000e000d86bd4fd4b8e120f58db83fb14957ae55840e4fb0ff564e2429632fba52011f8c4d3eb4ab2668e472674f8e0d4ac81e7f9e5476c2b6811992e29220a4e7c9137d5e08204aadda9c01d20c68c4845ee9afaf323e89c1c9a5809ea85ac313cd000000000000000000000000000000000000000000000000000000000000000007128f22f9af0a91090719f50fc292b2f6ac86fcc6eaa53c7fd4d0fd945b4c5a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000000000152c9bef2bda46a492321a6650097ddf1eca56eae253f943000000000000000000000000f4d4c21038f6ae5eaba3d9c819b4bc680ae4baca0be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a000d50137d5e08204aadda9c01d20c68c4845ee9afaf323e89c1c9a5809e5201137d5e08204aadda9c01d20c68c4845ee9afaf323e89c1c9a5809ea85ac313cd00000000000000000000000000000000000000000000000000000000687a2d790000000000000000000000000000000000000000000000000000000000000001";
  console.log("Submitting response to UniversalVerifier...");
  const tx = await verifierContract.submitResponse(
    {
      authMethod: "authV2",
      proof: bytesAuthProof,
    },
    [
      {
        requestId: 1766847064778384848774503903277701057664923553150306959495349798740162883n,
        proof: bytesRequestProof,
        metadata: "0x",
      },
    ],
    "0x",
  );
  console.log("Waiting for tx to be mined...");
  await tx.wait();
  console.log("Ok!!!!");

  /* const [signer] = await ethers.getSigners();
  const verifier = new ethers.Contract(
    "0xfa1d72bbEBdEBc16d00e6e51B164746B297de688",
    IVerifierABI, //IVerifierABI.abi,
    signer,
  );
  console.log("Submitting response 2 to UniversalVerifier...");
  const tx2 = await verifier.submitResponse(
    {
      authMethod: "authV2",
      proof: bytesRequestProof,
    },
    [
      {
        requestId: 1766847064778384848774503903277701057664923553150306959495349798740162883n,
        proof: bytesRequestProof,
        metadata: "0x",
      },
    ],
    "0x",
  );
  console.log("Waiting for tx2 to be mined...");
  await tx2.wait();
  console.log("Ok!!!!");*/
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
