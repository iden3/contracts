import { ethers } from "hardhat";
import { prepareInputs } from "../../test/utils/state-utils";
//import * as IVerifierABI from "../../artifacts/contracts/interfaces/IVerifier.sol/IVerifier.json";

import { IVerifierABI } from "@iden3/universal-verifier-v2-abi";

async function main() {
  const groth16VerifierContract = await ethers.getContractAt(
    "Groth16VerifierV3Wrapper",
    "0x94BD14D2eDC0F78Ec51780cb6C06cfEA5eE2f3d9",
  );
  console.log("Submitting proof to Groth16VerifierV3Wrapper...");
  const jsonProof = {
    id: "1766847064778384848774503903277701057664923553150306959495349798740162883",
    circuitId: "credentialAtomicQueryV3OnChain-beta.1",
    proof: {
      pi_a: [
        "19216698943995881536467438976255145066117342212086053547004920219466270835933",
        "16812674723450859309698679165296114205679072429266442094305516729598627498925",
        "1",
      ],
      pi_b: [
        [
          "2719540313173633861555421666165951873572331376548581790543238788654051551439",
          "804827370749704609814157761995692684503230317827306961845106467331341624328",
        ],
        [
          "9413051822202300705675277343004888973960358667001671318036993299033205651588",
          "143785458397386943059993661557003665761025228557546688346595743020948491375",
        ],
        ["1", "0"],
      ],
      pi_c: [
        "6495841308209005977462935099675637838408152653497379283951927728795137281436",
        "2539476284465547571390965528680099911555013158903373993931533534444903238909",
        "1",
      ],
      protocol: "groth16",
      curve: "bn128",
    },
    pub_signals: [
      "21673682315500606770216217236361793129204560053792578606692428956428030465",
      "14269590020162247624697549264280988226443582809667296964001711108738429282249",
      "15204044154861027985799819612996094031620433951451229330994164767550803554542",
      "0",
      "7001310985615618788035259439939117451658345204922150271394992238934558759524",
      "0",
      "1",
      "1766847064778384848774503903277701057664923553150306959495349798740162883",
      "1397738411366811577672750727150514215345254087370",
      "0",
      "19450027436906808598733474944478006388219978643758688014300016516391457281",
      "15204044154861027985799819612996094031620433951451229330994164767550803554542",
      "1752674750",
      "1",
    ],
  };
  const { inputs, pi_a, pi_b, pi_c } = prepareInputs(jsonProof);
  console.log("Verifying Groth16 proof...");
  const verified = await groth16VerifierContract.verify(pi_a, pi_b, pi_c, inputs);
  console.log("Verified: ", verified);

  const verifierContract = await ethers.getContractAt(
    "UniversalVerifierTestWrapper_ManyResponsesPerUserAndRequest",
    "0xfa1d72bbEBdEBc16d00e6e51B164746B297de688",
  );

  /*const verifierContract = await ethers.getContractAt(
    "UniversalVerifier",
    "0xc89fA32a60aa91f0AbB2225c9e338bf8F634F20d",
  );*/

  const bytesAuthProof =
    "0x00000000000000000000000000000000000000000000000000000000000001202f7f5115c2cbb0cf4520ca27da3834e8c669bf181523e8765c02089396751a5f263a63b6b51c2c0b355767ec73131a9e91f70423153f8a8c4b651aa322c3ffdc07f076b6589583be34a4e7a8aef2d196201c9b5fb65e0ba656ce275bd272d36c3023faedd532fa689a3257b80306dd1f2593932c27dee01e458753e49fcf7117233bcebe9a7c1f024a87b1ead3b4f100fc705a700d2c5d1a0c4e420b27cbec1901261bcd615ffb50117d310c7c931f21d8d06581db48ad05ef34a613b0f385921ffb52c80376a511d1453a8183cf42e88803a37f8034800e286057bee2ef23ee12f5c3756aeba462206a4ee48927dc9035f5aa9f24c20058631809711abee2930000000000000000000000000000000000000000000000000000000000000003000e87820d8b2c6595a6b6fe27dbe2e09ca9c31e9458bbae017de80ae80352010a9e219e69b7c9a3e6ac7e2eca511d305bac6098d4c3533db3a46f29db38b3370be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a";
  const bytesRequestProof =
    "0x00000000000000000000000000000000000000000000000000000000000001200fffd8707f4d1225b89f965d5bcb6451f3b493acb72d14628ef3578dc5d586c01a1ab55b6ce621fd805f6e444024ca3f8c69df6c9e1bcc096f73244c4011103a09db7074771371a9e833c7062a4ec10945f2e227d9d72d47209e4f6e4754e3df101c7ed250b162ac9115ed0a6afab02e7c875f4f57d9eda3bea1321636b0a43614a9f0862fef8486386fdca05ab503c41e3cb01ee84f8f0900208bce4692a86e13533d204c7400a7dd58ea12b3b104b7b86f1c9f9b7049b2631b890b9953aa9a102e3dbc2dc5b6b73104a0d2e0dfb67902a5b89ac70e2e3b4010c4a25d39b22b1a4c2900c97936efa9de240f7b01c82074f75c25ad337852e77480ef8e9c9db5000000000000000000000000000000000000000000000000000000000000000e000e87820d8b2c6595a6b6fe27dbe2e09ca9c31e9458bbae017de80ae80352011f8c4d3eb4ab2668e472674f8e0d4ac81e7f9e5476c2b6811992e29220a4e7c91169553be3cd93719b4a3d8a0e43b06cae5f2846c8f1bed323a00f600a6bbe2900000000000000000000000000000000000000000000000000000000000000001dd1c9fd175f1801968f9b28b58b1c50a8cec8179a921a6c7b667ef1b106d173000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000000000152c9bef2bda46a492321a6650097ddf1eca56eae253f943000000000000000000000000f4d4c21038f6ae5eaba3d9c819b4bc680ae4baca0be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a000cc11169553be3cd93719b4a3d8a0e43b06cae5f2846c8f1bed323a00f52011169553be3cd93719b4a3d8a0e43b06cae5f2846c8f1bed323a00f600a6bbe2900000000000000000000000000000000000000000000000000000000687a3bb10000000000000000000000000000000000000000000000000000000000000001";
  console.log("Submitting response to UniversalVerifier...");
  const tx = await verifierContract.submitResponse(
    {
      authMethod: "authV2",
      proof: bytesAuthProof,
    },
    [
      {
        requestId: 1766847064778384848774503903277701057664923553150306959495349798740162883n,
        proof: bytesRequestProof,
        metadata: "0x",
      },
    ],
    "0x",
    {
      gasPrice: 50000000000,
      initialBaseFeePerGas: 25000000000,
      gasLimit: 10000000,
    },
  );
  console.log("Waiting for tx to be mined...");
  await tx.wait();
  console.log("Ok!!!!");

  /* const [signer] = await ethers.getSigners();
  const verifier = new ethers.Contract(
    "0xfa1d72bbEBdEBc16d00e6e51B164746B297de688",
    IVerifierABI, //IVerifierABI.abi,
    signer,
  );
  console.log("Submitting response 2 to UniversalVerifier...");
  const tx2 = await verifier.submitResponse(
    {
      authMethod: "authV2",
      proof: bytesRequestProof,
    },
    [
      {
        requestId: 1766847064778384848774503903277701057664923553150306959495349798740162883n,
        proof: bytesRequestProof,
        metadata: "0x",
      },
    ],
    "0x",
  );
  console.log("Waiting for tx2 to be mined...");
  await tx2.wait();
  console.log("Ok!!!!");*/
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
