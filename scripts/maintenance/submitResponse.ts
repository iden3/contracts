import { ethers } from "hardhat";
import { prepareInputs } from "../../test/utils/state-utils";
//import * as IVerifierABI from "../../artifacts/contracts/interfaces/IVerifier.sol/IVerifier.json";

import { IVerifierABI } from "@iden3/universal-verifier-v2-abi";

async function main() {
  const groth16VerifierContract = await ethers.getContractAt(
    "Groth16VerifierV3Wrapper",
    "0x94BD14D2eDC0F78Ec51780cb6C06cfEA5eE2f3d9",
  );
  console.log("Submitting proof to Groth16VerifierV3Wrapper...");
  const jsonProof = {
    id: "1766847064778384848774503903277701057664923553150306959495349798740162883",
    circuitId: "credentialAtomicQueryV3OnChain-beta.1",
    proof: {
      pi_a: [
        "19216698943995881536467438976255145066117342212086053547004920219466270835933",
        "16812674723450859309698679165296114205679072429266442094305516729598627498925",
        "1",
      ],
      pi_b: [
        [
          "2719540313173633861555421666165951873572331376548581790543238788654051551439",
          "804827370749704609814157761995692684503230317827306961845106467331341624328",
        ],
        [
          "9413051822202300705675277343004888973960358667001671318036993299033205651588",
          "143785458397386943059993661557003665761025228557546688346595743020948491375",
        ],
        ["1", "0"],
      ],
      pi_c: [
        "6495841308209005977462935099675637838408152653497379283951927728795137281436",
        "2539476284465547571390965528680099911555013158903373993931533534444903238909",
        "1",
      ],
      protocol: "groth16",
      curve: "bn128",
    },
    pub_signals: [
      "21673682315500606770216217236361793129204560053792578606692428956428030465",
      "14269590020162247624697549264280988226443582809667296964001711108738429282249",
      "15204044154861027985799819612996094031620433951451229330994164767550803554542",
      "0",
      "7001310985615618788035259439939117451658345204922150271394992238934558759524",
      "0",
      "1",
      "1766847064778384848774503903277701057664923553150306959495349798740162883",
      "1397738411366811577672750727150514215345254087370",
      "0",
      "19450027436906808598733474944478006388219978643758688014300016516391457281",
      "15204044154861027985799819612996094031620433951451229330994164767550803554542",
      "1752674750",
      "1",
    ],
  };
  const { inputs, pi_a, pi_b, pi_c } = prepareInputs(jsonProof);
  console.log("Verifying Groth16 proof...");
  const verified = await groth16VerifierContract.verify(pi_a, pi_b, pi_c, inputs);
  console.log("Verified: ", verified);

  const verifierContract = await ethers.getContractAt(
    "UniversalVerifierTestWrapper_ManyResponsesPerUserAndRequest",
    "0xfa1d72bbEBdEBc16d00e6e51B164746B297de688",
  );

  /*const verifierContract = await ethers.getContractAt(
    "UniversalVerifier",
    "0xc89fA32a60aa91f0AbB2225c9e338bf8F634F20d",
  );*/

  const bytesAuthProof =
    "0x000000000000000000000000000000000000000000000000000000000000012008b4763727ed51917e1a507bd2a481ae8c3877ed591aba3082e4d92bf8af7eb8052b747fb99503d1fbbfab6d39345b8742ef4d8107716758e71352bd98f0903f1337973676a718bdefba2b1a52cdba299a1a58ee17583f1f399f7cd0880ac9c925abcf88c8278db8905d086f2f22e316d4644f926a33ecef9104e917ad83ba031b2c6b48ee00495b462b536d14ec2b23767345f1aec20c8861dee6324c0815b703a93d5cec12c867bf493b90e35e5f9604eeffa680126da036c58ede7ae2cc39298419285e892414e91da92600cb8bc1cd64c3be4e277cfc8cdca950977017cd2944b8b6bb95206e0a8b2f718c32f216251e1edef8606ec475c4df054cafb7170000000000000000000000000000000000000000000000000000000000000003000c831c97cc157e36033a72ff23829af53955c730c542a2fa1b1e998f7d52010e5de876f19995352a5c42d2b4d9271d26ba98b9a53f7de65bafdb67edc7f2f10be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a";
  const bytesRequestProof =
    "0x00000000000000000000000000000000000000000000000000000000000001201929efdbe404c5b7701a84e4fce6f2c3a31e1eb07aa372dd10038a7c251d79aa16a1912d203874cb270f4e2aa94b0a5d72f61358727c1ea58a4ba722e02da6900389c4bdfe445777b1dad7bdaf44ca54648ef8a1d2658fbcb3ad09dc1f157fa72030ae5c3a0a7e28ba46cdf0ff7122b7cbc1858d4d1d79b5c2bdaf40d539efbd19419c1d187d33c0863f2fba2834757653924de12024c694eac4b7972dd5b8992c0d0590c6ef16f9a49a2e09a89b975599144b773c6084f1adaf5a320a2479171b50f4b4f57bc691ec3c0b8cda4d00b8ea43178f788fc53bf41291c31f78843b20cdfb70fa42b2afdc8ad002f8c0a43616dc4bc015406a6b43568a233de27740000000000000000000000000000000000000000000000000000000000000000e000c831c97cc157e36033a72ff23829af53955c730c542a2fa1b1e998f7d52011f8c4d3eb4ab2668e472674f8e0d4ac81e7f9e5476c2b6811992e29220a4e7c920c590f172eb68ba1d4b149a3531e372b34590cce928fbae23b863f5cdbce44d000000000000000000000000000000000000000000000000000000000000000003a01ca6ac022f4e2042ff46a9e2da3b5441ccb4649483d6fed7946a72787660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000000000152c9bef2bda46a492321a6650097ddf1eca56eae253f943000000000000000000000000f4d4c21038f6ae5eaba3d9c819b4bc680ae4baca0be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a000e5520c590f172eb68ba1d4b149a3531e372b34590cce928fbae23b863520120c590f172eb68ba1d4b149a3531e372b34590cce928fbae23b863f5cdbce44d00000000000000000000000000000000000000000000000000000000687a25450000000000000000000000000000000000000000000000000000000000000001";
  console.log("Submitting response to UniversalVerifier...");
  const tx = await verifierContract.submitResponse(
    {
      authMethod: "authV2",
      proof: bytesAuthProof,
    },
    [
      {
        requestId: 1766847064778384848774503903277701057664923553150306959495349798740162883n,
        proof: bytesRequestProof,
        metadata: "0x",
      },
    ],
    "0x",
  );
  console.log("Waiting for tx to be mined...");
  await tx.wait();
  console.log("Ok!!!!");

  /* const [signer] = await ethers.getSigners();
  const verifier = new ethers.Contract(
    "0xfa1d72bbEBdEBc16d00e6e51B164746B297de688",
    IVerifierABI, //IVerifierABI.abi,
    signer,
  );
  console.log("Submitting response 2 to UniversalVerifier...");
  const tx2 = await verifier.submitResponse(
    {
      authMethod: "authV2",
      proof: bytesRequestProof,
    },
    [
      {
        requestId: 1766847064778384848774503903277701057664923553150306959495349798740162883n,
        proof: bytesRequestProof,
        metadata: "0x",
      },
    ],
    "0x",
  );
  console.log("Waiting for tx2 to be mined...");
  await tx2.wait();
  console.log("Ok!!!!");*/
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
