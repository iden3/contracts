import { ethers } from "hardhat";
import { prepareInputs } from "../../test/utils/state-utils";
//import * as IVerifierABI from "../../artifacts/contracts/interfaces/IVerifier.sol/IVerifier.json";

import { IVerifierABI } from "@iden3/universal-verifier-v2-abi";

async function main() {
  const groth16VerifierContract = await ethers.getContractAt(
    "Groth16VerifierV3Wrapper",
    "0x94BD14D2eDC0F78Ec51780cb6C06cfEA5eE2f3d9",
  );
  console.log("Submitting proof to Groth16VerifierV3Wrapper...");
  const jsonProof = {
    id: "1766847064778384848774503903277701057664923553150306959495349798740162883",
    circuitId: "credentialAtomicQueryV3OnChain-beta.1",
    proof: {
      pi_a: [
        "19216698943995881536467438976255145066117342212086053547004920219466270835933",
        "16812674723450859309698679165296114205679072429266442094305516729598627498925",
        "1",
      ],
      pi_b: [
        [
          "2719540313173633861555421666165951873572331376548581790543238788654051551439",
          "804827370749704609814157761995692684503230317827306961845106467331341624328",
        ],
        [
          "9413051822202300705675277343004888973960358667001671318036993299033205651588",
          "143785458397386943059993661557003665761025228557546688346595743020948491375",
        ],
        ["1", "0"],
      ],
      pi_c: [
        "6495841308209005977462935099675637838408152653497379283951927728795137281436",
        "2539476284465547571390965528680099911555013158903373993931533534444903238909",
        "1",
      ],
      protocol: "groth16",
      curve: "bn128",
    },
    pub_signals: [
      "21673682315500606770216217236361793129204560053792578606692428956428030465",
      "14269590020162247624697549264280988226443582809667296964001711108738429282249",
      "15204044154861027985799819612996094031620433951451229330994164767550803554542",
      "0",
      "7001310985615618788035259439939117451658345204922150271394992238934558759524",
      "0",
      "1",
      "1766847064778384848774503903277701057664923553150306959495349798740162883",
      "1397738411366811577672750727150514215345254087370",
      "0",
      "19450027436906808598733474944478006388219978643758688014300016516391457281",
      "15204044154861027985799819612996094031620433951451229330994164767550803554542",
      "1752674750",
      "1",
    ],
  };
  const { inputs, pi_a, pi_b, pi_c } = prepareInputs(jsonProof);
  console.log("Verifying Groth16 proof...");
  const verified = await groth16VerifierContract.verify(pi_a, pi_b, pi_c, inputs);
  console.log("Verified: ", verified);

  const verifierContract = await ethers.getContractAt(
    "UniversalVerifierTestWrapper_ManyResponsesPerUserAndRequest",
    "0xfa1d72bbEBdEBc16d00e6e51B164746B297de688",
  );

  /*const verifierContract = await ethers.getContractAt(
    "UniversalVerifier",
    "0xc89fA32a60aa91f0AbB2225c9e338bf8F634F20d",
  );*/

  console.log("Submitting response to UniversalVerifier...");
  const tx = await verifierContract.submitResponse(
    {
      authMethod: "authV2",
      proof:
        "0x000000000000000000000000000000000000000000000000000000000000012003d7d3f9ac8d2c2ab59f32175bd333cdda08ff7fd13ce0d8123fccac1a5b65b72331e1e46e15f6023183aceeea033061973ae61067cfebecf2e2010c6768f5380c0acff75561f73649868cf02cfd68c1860793dbd40cf0683307661da586180309a967999501bd5efcadb8d19ef36b77a2bfcc5badaa5bb45d1f32f147724aad0bd9e4a3b2514dc0e9d05bded4603c1497604ce5e33140a4c68f8b916b99b3c429032b5f77fee5370a66b678afe873010e499c6afc91634345d65b0692e7c05b16e2e5766dac55c6255b022546082ff480bf7c7e738b8109fcaeda3d48353b091e3610dc4189e381d0b5d78dba44e7c90c0e60695ab871c5fa24df67362d26b600000000000000000000000000000000000000000000000000000000000000030010dbf85e3d4ef714b4c2f1a2a2ab80fea2c418df7884e8a1f1892a6cd652010e6ef45f51582ee8ac301859a2c8e5210923365fd5bc0715cba50687604a601b0be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a",
    },
    [
      {
        requestId: 1766847064778384848774503903277701057664923553150306959495349798740162883n,
        proof:
          "0x000000000000000000000000000000000000000000000000000000000000012004a92ca065dcf00eda01ac493b8d59d5479e06830a496d9190c43f3b456ea0f315f6a764262f7cb829503bac8b490a0735e23354369dc183bd1b180daa3168551d26ad0c0157ecc1ab3bf5409e0aa8d1de0bcb7392913c0db1a227fe5eac8e9727fce39df7609d02a3a5614574badc6f5c181f49e14c146ad8fbeebb5aa94eba0dc1994b89a67603b259bd061d29f43677231b956c8cb4d33028e7ee17b352b619a3ef81ce006d9049833ceeec762845e8df3ee68d2cff034b6a0c8a382e39bf0d2860b07f31c25baac3a768aeda222bd5c12bfe939c102e8d4b8137f365f8b22498f82c490adb1b6e3077e3eb194903b144edb3b428ec866f7527d195a962bb000000000000000000000000000000000000000000000000000000000000000e0010dbf85e3d4ef714b4c2f1a2a2ab80fea2c418df7884e8a1f1892a6cd652011f8c4d3eb4ab2668e472674f8e0d4ac81e7f9e5476c2b6811992e29220a4e7c90b67d8e930ebf74a84cfa176504f51677bb120fca60fc4b1845b6232ffaac5580000000000000000000000000000000000000000000000000000000000000000210e9ceb86b969be4aac0d482847f4423174f6dc843f6b6011447387af5c50c4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000000000152c9bef2bda46a492321a6650097ddf1eca56eae253f943000000000000000000000000f4d4c21038f6ae5eaba3d9c819b4bc680ae4baca0be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a000e560b67d8e930ebf74a84cfa176504f51677bb120fca60fc4b1845b6252010b67d8e930ebf74a84cfa176504f51677bb120fca60fc4b1845b6232ffaac55800000000000000000000000000000000000000000000000000000000687912540000000000000000000000000000000000000000000000000000000000000001",
        metadata: "0x",
      },
    ],
    "0x",
    {
      gasPrice: 50000000000,
      gasLimit: 5000000,
    },
  );
  console.log("Waiting for tx to be mined...");
  await tx.wait();
  console.log("Ok!!!!");

  const [signer] = await ethers.getSigners();
  const verifier = new ethers.Contract(
    "0xfa1d72bbEBdEBc16d00e6e51B164746B297de688",
    IVerifierABI, //IVerifierABI.abi,
    signer,
  );
  console.log("Submitting response 2 to UniversalVerifier...");
  const tx2 = await verifier.submitResponse(
    {
      authMethod: "authV2",
      proof:
        "0x000000000000000000000000000000000000000000000000000000000000012003d7d3f9ac8d2c2ab59f32175bd333cdda08ff7fd13ce0d8123fccac1a5b65b72331e1e46e15f6023183aceeea033061973ae61067cfebecf2e2010c6768f5380c0acff75561f73649868cf02cfd68c1860793dbd40cf0683307661da586180309a967999501bd5efcadb8d19ef36b77a2bfcc5badaa5bb45d1f32f147724aad0bd9e4a3b2514dc0e9d05bded4603c1497604ce5e33140a4c68f8b916b99b3c429032b5f77fee5370a66b678afe873010e499c6afc91634345d65b0692e7c05b16e2e5766dac55c6255b022546082ff480bf7c7e738b8109fcaeda3d48353b091e3610dc4189e381d0b5d78dba44e7c90c0e60695ab871c5fa24df67362d26b600000000000000000000000000000000000000000000000000000000000000030010dbf85e3d4ef714b4c2f1a2a2ab80fea2c418df7884e8a1f1892a6cd652010e6ef45f51582ee8ac301859a2c8e5210923365fd5bc0715cba50687604a601b0be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a",
    },
    [
      {
        requestId: 1766847064778384848774503903277701057664923553150306959495349798740162883n,
        proof:
          "0x000000000000000000000000000000000000000000000000000000000000012004a92ca065dcf00eda01ac493b8d59d5479e06830a496d9190c43f3b456ea0f315f6a764262f7cb829503bac8b490a0735e23354369dc183bd1b180daa3168551d26ad0c0157ecc1ab3bf5409e0aa8d1de0bcb7392913c0db1a227fe5eac8e9727fce39df7609d02a3a5614574badc6f5c181f49e14c146ad8fbeebb5aa94eba0dc1994b89a67603b259bd061d29f43677231b956c8cb4d33028e7ee17b352b619a3ef81ce006d9049833ceeec762845e8df3ee68d2cff034b6a0c8a382e39bf0d2860b07f31c25baac3a768aeda222bd5c12bfe939c102e8d4b8137f365f8b22498f82c490adb1b6e3077e3eb194903b144edb3b428ec866f7527d195a962bb000000000000000000000000000000000000000000000000000000000000000e0010dbf85e3d4ef714b4c2f1a2a2ab80fea2c418df7884e8a1f1892a6cd652011f8c4d3eb4ab2668e472674f8e0d4ac81e7f9e5476c2b6811992e29220a4e7c90b67d8e930ebf74a84cfa176504f51677bb120fca60fc4b1845b6232ffaac5580000000000000000000000000000000000000000000000000000000000000000210e9ceb86b969be4aac0d482847f4423174f6dc843f6b6011447387af5c50c4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000000000152c9bef2bda46a492321a6650097ddf1eca56eae253f943000000000000000000000000f4d4c21038f6ae5eaba3d9c819b4bc680ae4baca0be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a000e560b67d8e930ebf74a84cfa176504f51677bb120fca60fc4b1845b6252010b67d8e930ebf74a84cfa176504f51677bb120fca60fc4b1845b6232ffaac55800000000000000000000000000000000000000000000000000000000687912540000000000000000000000000000000000000000000000000000000000000001",
        metadata: "0x",
      },
    ],
    "0x",
    {
      gasPrice: 50000000000,
      gasLimit: 5000000,
    },
  );
  console.log("Waiting for tx2 to be mined...");
  await tx2.wait();
  console.log("Ok!!!!");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
